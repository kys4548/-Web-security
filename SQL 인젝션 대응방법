SQL 인젝션 대응방법
모든 애플리케이션이 그렇듯이 프로그램 설계에서부터 코딩까지 공격에 대한 방어가 고려되어야한다.
최선은 대응방안은 사용자로부터 전송되는 모든 입력을 검증하는 것이다.

-변수와 데이터베이스 칼럼 정의
정수나 우편 번호, 생일 등과 같은 것은 숫자 유형으로 저장하고 처리한다.
문자열(varchar)은 영문만 허용하고 구두점과 SQL 구문의 문자 입력을 제한하여
'select ...' 와 같이 예기치 않은 문자가 입력되는 것을 차단하도록 한다.

-반환되는 변수의 타입 정의
웹 애플리케이션이 숫자 값을 검색하고 있다면,
숫자가 나올 수 있게 할당하여 공격자가 임의의 정보를 획득하는 것을 차단한다.

-데이터 길이의 제한
모든 문자열이 목적에 맞게 적절한 길이로 제한한다.
제한된 길이에서 실행 가능한 모든 문자열은 제한적이다.
따라서, SQL 인젝션 같은 공격을 효과적으로 막을 수 있다.
일반 프로그램에서는 버퍼 오버플로와 같은 문제가 발생할 수 있어서 길이 제한은 필수적이다.

-저장 프로시저 사용
"'select * from table where'+<변수>....."같이 변수를 SQL구문 안에 직접 입력하는 것은
SQL 인젝션 공격에 취약하므로 저장 프로시저를 이용하여 쿼리문을 처리하도록 한다.
저장 프로시저 역시 오류는 발생할 수 있지만, 전체 쿼리를 조작하는 공격은 방어가능하다.

-데이터 테이블별 권한 부여
웹 애플리케이션의 데이터베이스 접속 계정은 필요한 테이블에만 권한을 부여하고 데이터베이스 내부 카탈로그, 특히 계정관리 시스템 변수에는 접급할 수 없도록 한다.

-적절한 오류 처리
적절치 못한 오류 처리로 인해 데이터베이스 덤프, 오류 코드와 같은 내부 메세지가 보일 수 있다.
오류 페이지를 반환할 때 이 페이지에서 사용된 변수명과 파일명, 데이터베이스 쿼리와 같은 내부 상태정보를 포함되지 않도록 한다.

-웹 애플리케이션 로그 설정
로그는 오류의 디버깅뿐만 아니라 공격 행위에 관한 판단 및 확인의 근거로도 유용하다.
따라서, 시스템과 서버에 관한 로그 뿐만 아니라 웹 애플리케이션 단계의 로그도 설정하도록 한다.

-모든 파라미터 점검
데이터베이스와 연동하는 스크립트는 모든 파라미터를 점검하여 사용자의 입력값이 SQL인젝션을 발생시키지 않도록 수정한다.
사용자 입력이 SQL 인젝션을 발생시키지 않도록 사용자 입력시 특수문자(' " / \ ; : SPACE -- + 등)가 포함되어 있는지 검사하여 허용되지 않은 문자열이나 문자가 포함된 경우에는 에러로 처리한다.

-SQL 에러 메세지 숨김
SQL 서버의 에러 메시지를 사용자에게 보여주지 않도록 설정한다.
공격자는 리턴되는 에러 메세지에 대한 분석을 통하여 공격에 성공할 수 있는 SQL 인젝션 스트링을 알아낼 수 있다. 
따라서, SQL서버의 에러 메세지를 외부에 제공하지 않도록 한다.