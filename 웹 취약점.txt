1. 정보 누출
html소스에 개인정보, 인증정보, db접속정보 등의 중요 정보가 노출되어 있는지 확인한다.(주석도 포함)
<script>는 다 노출될텐데 어떻게 막지;;

에러 메시지에서 중요 정보가 노출되는지 확인한다 (에러 페이지를 별도로 지정해야 한다.)

2. 데이터 패킷 전송시 평문 움직이면 안된다.
중요 정보를 송수신할때에는 암호화 통신(https://, 데이터 암호화 등)을 해야한다.
데이터 암호화는 script단에서 시행하나?

3. 중요 정보에 접근할 때, 세션과 현재 사용자를 비교한다.

4. 로그인 할때마다 추측 불가능하게 세션ID가 발급되어야 한다.
세션 예측, 세션 고정, 세션하이제킹
- 세션 ID 생성 범위는 사용자 수를 고려하여 충분히 큰 값으로 생성한다.
- 세션 ID는 추측 불가능하게 랜더으로 생성한다.
- session timeout기능과 session id 재생성 기능을 사용한다. 일정 시간 동안 활동이 없는 사용자는 새로운 세션ID로 다시 로그인하도록 하고, 사용자가 로그아웃할 때는
   세션 ID 값을 폐기하도록 한다. 장시간 접속이 필요한 웹 애플리케이션의 경우에는 일정 주기마다 세션ID 값을 자동으로 재생성하여 세션을 유지하도록 한다.
- 무작위 추측 대입에 대비하여 일정 횟수 이상의 인증 실패할 때에는 사용자 잠금 기능을 구현한다.
- 로그인 이후에도 중요한 서비스 이용할 때에는 다시 한 번 사용자 인증을 한다.
- HTTPS 암호화로 스니핑을 방지한다.
- HTML 코드 삽입이 가능한 페이지가 있는지 점검하고, 특수 문자 및 스크립트를 필터링 한다.


5.계정이나  패스워드, 암호화 키 등을 유추하기 위해 반복적으로 값을 입력하여 해당 값을 발견해 내는 취약점이 있다.
   유추가 쉬운 계정 및 패스워드의 사용을 방지하기 위해 해당 값의 적절성 및 복잡성을 검증하는 체크 로직을 구현해야 한다.
- 무차별 대입 공격을 수행 할 수 있는 도구를 사용하여 계정의 패스워드가 크랙이 가능한지 확인한다.
123456 : 즉시
abzfezd : o.2초
a9zlezd : 2초
aB8fEzDq : 2시간
z8!E?7D$ : 2일
My1stPassword!:Redd : 3600경년 

6. 패스워드 복구 로직으로 인하여 공격자가 다른 사용자의 패스워드를 획득, 변경하는 취약점이 있다.
    복구 로직은 유추하기 어렵게 구현되어야 한다.
- 패스워드 찾기에서 아이디가 없을시, 없다고 알려주면 무차별 대입공격 대상이 된다. 비밀번호를 찾기 위한 문제도 간단하게 하면 안되겠다. 
- 일정 패턴으로 패스워드가 재발행되면 안된다 -> 난수 사용

- 기본 계정 제한 (admin, test 등)
- 휴먼계정 전환
- 로그인 IP 제한
- 자동화된 로그인 시도 사전 차단

7. SQL 인젝션
- 입력폼에  , ; -- 등의 문자열을 입력한다. 서버로 보낼 때, 에러가 뜨는지 확인한다.
- 입력폼의 쿼리 구조를 파악하고 or, and, union등의 언어 공격 주의
- 매개변수에 문자열 검사를 필수로 적용
- 필터링 등 입력값 검증 프로세스는 client side script가 아닌 server페이지로 구현한다.
 
